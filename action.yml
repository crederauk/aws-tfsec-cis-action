name: 'Run tfsec with CIS AWS custom policies'
description: 'Runs tfsec with additional custom rules to enforce CIS AWS benchmark policies'
inputs:
  terraform-directory:
    description: 'Relative path to the terraform code directory'
    required: false
    default: 'terraform'
  ignore-fail:
    description: 'Return 0 exit code no matter if checks pass or not ("true"/"false")'
    required: false
    default: 'false'
outputs:
  tfsec-result:
    description: "tfsec output"
    value: ${{ steps.tfsec.outputs.tfsec_result }}
runs:
  using: "composite"
  steps:
    - run: echo Using tfsec to scan ${{ inputs.terraform-directory }}.
      shell: bash
    - run: cp -r ./${{ inputs.terraform-directory }} ${{ github.action_path }}/tfsec-run
      shell: bash
    - run: mkdir ${{ github.action_path }}/tfsec-run/.tfsec
      shell: bash
    - run: cp ${{ github.action_path }}/.tfsec/**/*.json ${{ github.action_path }}/tfsec-run/.tfsec
      shell: bash
    - name: Run tfsec
      id: tfsec
      shell: bash
      working-directory: ${{ github.action_path }}/tfsec-run
      run: |
        tfsec_result="$(docker run --rm -v "$(pwd):/src" aquasec/tfsec --soft-fail --no-colour /src)"
        cat <<EOF
        $tfsec_result
        EOF
        tfsec_result="${tfsec_result//'%'/'%25'}"
        tfsec_result="${tfsec_result//$'\n'/'%0A'}"
        tfsec_result="${tfsec_result//$'\r'/'%0D'}"
        tfsec_result="${tfsec_result//'`'/'%60'}"
        tfsec_result="${tfsec_result//'{'/'%7B'}"
        tfsec_result="${tfsec_result//'}'/'%7D'}"
        echo "::set-output name=tfsec_result::$tfsec_result"
        if [[ $tfsec_result == *"." ]] && [[ ${{ inputs.ignore-fail }} != 'true' ]]; then
          exit 1
        fi
    - run: echo goodbye :\)
      shell: bash
